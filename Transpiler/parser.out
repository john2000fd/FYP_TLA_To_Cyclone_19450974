Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARROW
    BACK_SLASH
    CHECK
    COMMENT
    DIVIDE
    EDGE
    END_OF_FILE
    FORWARD_SLASH
    GOAL
    GRAPH
    GREATER_THAN
    INIT
    INVARIANT
    LEFT_BRACE
    LEFT_PAREN
    LEFT_SQR_BRACKET
    LESS_THAN
    MODULE_NAME
    NEXT
    NODE
    RIGHT_BRACE
    RIGHT_PAREN
    RIGHT_SQR_BRACKET
    SEMICOLON
    SINGLE_QUOTE
    SPEC
    STAR
    STRING_LITERAL
    UNDERSCORE
    VARIABLE_NAME

Grammar

Rule 0     S' -> module
Rule 1     module -> MODULE_WRAPPER MODULE IDENTIFIER MODULE_WRAPPER extends body
Rule 2     module -> MODULE_WRAPPER MODULE IDENTIFIER MODULE_WRAPPER body
Rule 3     extends -> EXTENDS IDENTIFIER_LIST
Rule 4     body -> declarations
Rule 5     body -> empty
Rule 6     statement -> constants_declaration
Rule 7     statement -> variables_declaration
Rule 8     statement -> assignment_statement
Rule 9     statement -> empty
Rule 10    declarations -> declarations declaration
Rule 11    declarations -> declaration
Rule 12    declaration -> constants_declaration
Rule 13    declaration -> variables_declaration
Rule 14    declaration -> assignment_statement
Rule 15    constants_declaration -> CONSTANTS IDENTIFIER_LIST
Rule 16    variables_declaration -> VARIABLE IDENTIFIER_LIST
Rule 17    IDENTIFIER_LIST -> IDENTIFIER_LIST COMMA IDENTIFIER
Rule 18    IDENTIFIER_LIST -> IDENTIFIER
Rule 19    assignment_statement -> IDENTIFIER EQUALS expression
Rule 20    expression -> expression PLUS expression
Rule 21    expression -> expression MINUS expression
Rule 22    expression -> IDENTIFIER
Rule 23    expression -> NUMBER_LITERAL
Rule 24    empty -> <empty>

Terminals, with rules where they appear

ARROW                : 
BACK_SLASH           : 
CHECK                : 
COMMA                : 17
COMMENT              : 
CONSTANTS            : 15
DIVIDE               : 
EDGE                 : 
END_OF_FILE          : 
EQUALS               : 19
EXTENDS              : 3
FORWARD_SLASH        : 
GOAL                 : 
GRAPH                : 
GREATER_THAN         : 
IDENTIFIER           : 1 2 17 18 19 22
INIT                 : 
INVARIANT            : 
LEFT_BRACE           : 
LEFT_PAREN           : 
LEFT_SQR_BRACKET     : 
LESS_THAN            : 
MINUS                : 21
MODULE               : 1 2
MODULE_NAME          : 
MODULE_WRAPPER       : 1 1 2 2
NEXT                 : 
NODE                 : 
NUMBER_LITERAL       : 23
PLUS                 : 20
RIGHT_BRACE          : 
RIGHT_PAREN          : 
RIGHT_SQR_BRACKET    : 
SEMICOLON            : 
SINGLE_QUOTE         : 
SPEC                 : 
STAR                 : 
STRING_LITERAL       : 
UNDERSCORE           : 
VARIABLE             : 16
VARIABLE_NAME        : 
error                : 

Nonterminals, with rules where they appear

IDENTIFIER_LIST      : 3 15 16 17
assignment_statement : 8 14
body                 : 1 2
constants_declaration : 6 12
declaration          : 10 11
declarations         : 4 10
empty                : 5 9
expression           : 19 20 20 21 21
extends              : 1
module               : 0
statement            : 
variables_declaration : 7 13

Parsing method: LALR

state 0

    (0) S' -> . module
    (1) module -> . MODULE_WRAPPER MODULE IDENTIFIER MODULE_WRAPPER extends body
    (2) module -> . MODULE_WRAPPER MODULE IDENTIFIER MODULE_WRAPPER body

    MODULE_WRAPPER  shift and go to state 2

    module                         shift and go to state 1

state 1

    (0) S' -> module .



state 2

    (1) module -> MODULE_WRAPPER . MODULE IDENTIFIER MODULE_WRAPPER extends body
    (2) module -> MODULE_WRAPPER . MODULE IDENTIFIER MODULE_WRAPPER body

    MODULE          shift and go to state 3


state 3

    (1) module -> MODULE_WRAPPER MODULE . IDENTIFIER MODULE_WRAPPER extends body
    (2) module -> MODULE_WRAPPER MODULE . IDENTIFIER MODULE_WRAPPER body

    IDENTIFIER      shift and go to state 4


state 4

    (1) module -> MODULE_WRAPPER MODULE IDENTIFIER . MODULE_WRAPPER extends body
    (2) module -> MODULE_WRAPPER MODULE IDENTIFIER . MODULE_WRAPPER body

    MODULE_WRAPPER  shift and go to state 5


state 5

    (1) module -> MODULE_WRAPPER MODULE IDENTIFIER MODULE_WRAPPER . extends body
    (2) module -> MODULE_WRAPPER MODULE IDENTIFIER MODULE_WRAPPER . body
    (3) extends -> . EXTENDS IDENTIFIER_LIST
    (4) body -> . declarations
    (5) body -> . empty
    (10) declarations -> . declarations declaration
    (11) declarations -> . declaration
    (24) empty -> .
    (12) declaration -> . constants_declaration
    (13) declaration -> . variables_declaration
    (14) declaration -> . assignment_statement
    (15) constants_declaration -> . CONSTANTS IDENTIFIER_LIST
    (16) variables_declaration -> . VARIABLE IDENTIFIER_LIST
    (19) assignment_statement -> . IDENTIFIER EQUALS expression

    EXTENDS         shift and go to state 9
    $end            reduce using rule 24 (empty -> .)
    CONSTANTS       shift and go to state 16
    VARIABLE        shift and go to state 17
    IDENTIFIER      shift and go to state 6

    extends                        shift and go to state 7
    body                           shift and go to state 8
    declarations                   shift and go to state 10
    empty                          shift and go to state 11
    declaration                    shift and go to state 12
    constants_declaration          shift and go to state 13
    variables_declaration          shift and go to state 14
    assignment_statement           shift and go to state 15

state 6

    (19) assignment_statement -> IDENTIFIER . EQUALS expression

    EQUALS          shift and go to state 18


state 7

    (1) module -> MODULE_WRAPPER MODULE IDENTIFIER MODULE_WRAPPER extends . body
    (4) body -> . declarations
    (5) body -> . empty
    (10) declarations -> . declarations declaration
    (11) declarations -> . declaration
    (24) empty -> .
    (12) declaration -> . constants_declaration
    (13) declaration -> . variables_declaration
    (14) declaration -> . assignment_statement
    (15) constants_declaration -> . CONSTANTS IDENTIFIER_LIST
    (16) variables_declaration -> . VARIABLE IDENTIFIER_LIST
    (19) assignment_statement -> . IDENTIFIER EQUALS expression

    $end            reduce using rule 24 (empty -> .)
    CONSTANTS       shift and go to state 16
    VARIABLE        shift and go to state 17
    IDENTIFIER      shift and go to state 6

    body                           shift and go to state 19
    declarations                   shift and go to state 10
    empty                          shift and go to state 11
    declaration                    shift and go to state 12
    constants_declaration          shift and go to state 13
    variables_declaration          shift and go to state 14
    assignment_statement           shift and go to state 15

state 8

    (2) module -> MODULE_WRAPPER MODULE IDENTIFIER MODULE_WRAPPER body .

    $end            reduce using rule 2 (module -> MODULE_WRAPPER MODULE IDENTIFIER MODULE_WRAPPER body .)


state 9

    (3) extends -> EXTENDS . IDENTIFIER_LIST
    (17) IDENTIFIER_LIST -> . IDENTIFIER_LIST COMMA IDENTIFIER
    (18) IDENTIFIER_LIST -> . IDENTIFIER

    IDENTIFIER      shift and go to state 21

    IDENTIFIER_LIST                shift and go to state 20

state 10

    (4) body -> declarations .
    (10) declarations -> declarations . declaration
    (12) declaration -> . constants_declaration
    (13) declaration -> . variables_declaration
    (14) declaration -> . assignment_statement
    (15) constants_declaration -> . CONSTANTS IDENTIFIER_LIST
    (16) variables_declaration -> . VARIABLE IDENTIFIER_LIST
    (19) assignment_statement -> . IDENTIFIER EQUALS expression

    $end            reduce using rule 4 (body -> declarations .)
    CONSTANTS       shift and go to state 16
    VARIABLE        shift and go to state 17
    IDENTIFIER      shift and go to state 6

    declaration                    shift and go to state 22
    constants_declaration          shift and go to state 13
    variables_declaration          shift and go to state 14
    assignment_statement           shift and go to state 15

state 11

    (5) body -> empty .

    $end            reduce using rule 5 (body -> empty .)


state 12

    (11) declarations -> declaration .

    CONSTANTS       reduce using rule 11 (declarations -> declaration .)
    VARIABLE        reduce using rule 11 (declarations -> declaration .)
    IDENTIFIER      reduce using rule 11 (declarations -> declaration .)
    $end            reduce using rule 11 (declarations -> declaration .)


state 13

    (12) declaration -> constants_declaration .

    CONSTANTS       reduce using rule 12 (declaration -> constants_declaration .)
    VARIABLE        reduce using rule 12 (declaration -> constants_declaration .)
    IDENTIFIER      reduce using rule 12 (declaration -> constants_declaration .)
    $end            reduce using rule 12 (declaration -> constants_declaration .)


state 14

    (13) declaration -> variables_declaration .

    CONSTANTS       reduce using rule 13 (declaration -> variables_declaration .)
    VARIABLE        reduce using rule 13 (declaration -> variables_declaration .)
    IDENTIFIER      reduce using rule 13 (declaration -> variables_declaration .)
    $end            reduce using rule 13 (declaration -> variables_declaration .)


state 15

    (14) declaration -> assignment_statement .

    CONSTANTS       reduce using rule 14 (declaration -> assignment_statement .)
    VARIABLE        reduce using rule 14 (declaration -> assignment_statement .)
    IDENTIFIER      reduce using rule 14 (declaration -> assignment_statement .)
    $end            reduce using rule 14 (declaration -> assignment_statement .)


state 16

    (15) constants_declaration -> CONSTANTS . IDENTIFIER_LIST
    (17) IDENTIFIER_LIST -> . IDENTIFIER_LIST COMMA IDENTIFIER
    (18) IDENTIFIER_LIST -> . IDENTIFIER

    IDENTIFIER      shift and go to state 21

    IDENTIFIER_LIST                shift and go to state 23

state 17

    (16) variables_declaration -> VARIABLE . IDENTIFIER_LIST
    (17) IDENTIFIER_LIST -> . IDENTIFIER_LIST COMMA IDENTIFIER
    (18) IDENTIFIER_LIST -> . IDENTIFIER

    IDENTIFIER      shift and go to state 21

    IDENTIFIER_LIST                shift and go to state 24

state 18

    (19) assignment_statement -> IDENTIFIER EQUALS . expression
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . IDENTIFIER
    (23) expression -> . NUMBER_LITERAL

    IDENTIFIER      shift and go to state 25
    NUMBER_LITERAL  shift and go to state 27

    expression                     shift and go to state 26

state 19

    (1) module -> MODULE_WRAPPER MODULE IDENTIFIER MODULE_WRAPPER extends body .

    $end            reduce using rule 1 (module -> MODULE_WRAPPER MODULE IDENTIFIER MODULE_WRAPPER extends body .)


state 20

    (3) extends -> EXTENDS IDENTIFIER_LIST .
    (17) IDENTIFIER_LIST -> IDENTIFIER_LIST . COMMA IDENTIFIER

    CONSTANTS       reduce using rule 3 (extends -> EXTENDS IDENTIFIER_LIST .)
    VARIABLE        reduce using rule 3 (extends -> EXTENDS IDENTIFIER_LIST .)
    IDENTIFIER      reduce using rule 3 (extends -> EXTENDS IDENTIFIER_LIST .)
    $end            reduce using rule 3 (extends -> EXTENDS IDENTIFIER_LIST .)
    COMMA           shift and go to state 28


state 21

    (18) IDENTIFIER_LIST -> IDENTIFIER .

    COMMA           reduce using rule 18 (IDENTIFIER_LIST -> IDENTIFIER .)
    CONSTANTS       reduce using rule 18 (IDENTIFIER_LIST -> IDENTIFIER .)
    VARIABLE        reduce using rule 18 (IDENTIFIER_LIST -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 18 (IDENTIFIER_LIST -> IDENTIFIER .)
    $end            reduce using rule 18 (IDENTIFIER_LIST -> IDENTIFIER .)


state 22

    (10) declarations -> declarations declaration .

    CONSTANTS       reduce using rule 10 (declarations -> declarations declaration .)
    VARIABLE        reduce using rule 10 (declarations -> declarations declaration .)
    IDENTIFIER      reduce using rule 10 (declarations -> declarations declaration .)
    $end            reduce using rule 10 (declarations -> declarations declaration .)


state 23

    (15) constants_declaration -> CONSTANTS IDENTIFIER_LIST .
    (17) IDENTIFIER_LIST -> IDENTIFIER_LIST . COMMA IDENTIFIER

    CONSTANTS       reduce using rule 15 (constants_declaration -> CONSTANTS IDENTIFIER_LIST .)
    VARIABLE        reduce using rule 15 (constants_declaration -> CONSTANTS IDENTIFIER_LIST .)
    IDENTIFIER      reduce using rule 15 (constants_declaration -> CONSTANTS IDENTIFIER_LIST .)
    $end            reduce using rule 15 (constants_declaration -> CONSTANTS IDENTIFIER_LIST .)
    COMMA           shift and go to state 28


state 24

    (16) variables_declaration -> VARIABLE IDENTIFIER_LIST .
    (17) IDENTIFIER_LIST -> IDENTIFIER_LIST . COMMA IDENTIFIER

    CONSTANTS       reduce using rule 16 (variables_declaration -> VARIABLE IDENTIFIER_LIST .)
    VARIABLE        reduce using rule 16 (variables_declaration -> VARIABLE IDENTIFIER_LIST .)
    IDENTIFIER      reduce using rule 16 (variables_declaration -> VARIABLE IDENTIFIER_LIST .)
    $end            reduce using rule 16 (variables_declaration -> VARIABLE IDENTIFIER_LIST .)
    COMMA           shift and go to state 28


state 25

    (22) expression -> IDENTIFIER .

    PLUS            reduce using rule 22 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 22 (expression -> IDENTIFIER .)
    CONSTANTS       reduce using rule 22 (expression -> IDENTIFIER .)
    VARIABLE        reduce using rule 22 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 22 (expression -> IDENTIFIER .)
    $end            reduce using rule 22 (expression -> IDENTIFIER .)


state 26

    (19) assignment_statement -> IDENTIFIER EQUALS expression .
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression

    CONSTANTS       reduce using rule 19 (assignment_statement -> IDENTIFIER EQUALS expression .)
    VARIABLE        reduce using rule 19 (assignment_statement -> IDENTIFIER EQUALS expression .)
    IDENTIFIER      reduce using rule 19 (assignment_statement -> IDENTIFIER EQUALS expression .)
    $end            reduce using rule 19 (assignment_statement -> IDENTIFIER EQUALS expression .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30


state 27

    (23) expression -> NUMBER_LITERAL .

    PLUS            reduce using rule 23 (expression -> NUMBER_LITERAL .)
    MINUS           reduce using rule 23 (expression -> NUMBER_LITERAL .)
    CONSTANTS       reduce using rule 23 (expression -> NUMBER_LITERAL .)
    VARIABLE        reduce using rule 23 (expression -> NUMBER_LITERAL .)
    IDENTIFIER      reduce using rule 23 (expression -> NUMBER_LITERAL .)
    $end            reduce using rule 23 (expression -> NUMBER_LITERAL .)


state 28

    (17) IDENTIFIER_LIST -> IDENTIFIER_LIST COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 31


state 29

    (20) expression -> expression PLUS . expression
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . IDENTIFIER
    (23) expression -> . NUMBER_LITERAL

    IDENTIFIER      shift and go to state 25
    NUMBER_LITERAL  shift and go to state 27

    expression                     shift and go to state 32

state 30

    (21) expression -> expression MINUS . expression
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . IDENTIFIER
    (23) expression -> . NUMBER_LITERAL

    IDENTIFIER      shift and go to state 25
    NUMBER_LITERAL  shift and go to state 27

    expression                     shift and go to state 33

state 31

    (17) IDENTIFIER_LIST -> IDENTIFIER_LIST COMMA IDENTIFIER .

    COMMA           reduce using rule 17 (IDENTIFIER_LIST -> IDENTIFIER_LIST COMMA IDENTIFIER .)
    CONSTANTS       reduce using rule 17 (IDENTIFIER_LIST -> IDENTIFIER_LIST COMMA IDENTIFIER .)
    VARIABLE        reduce using rule 17 (IDENTIFIER_LIST -> IDENTIFIER_LIST COMMA IDENTIFIER .)
    IDENTIFIER      reduce using rule 17 (IDENTIFIER_LIST -> IDENTIFIER_LIST COMMA IDENTIFIER .)
    $end            reduce using rule 17 (IDENTIFIER_LIST -> IDENTIFIER_LIST COMMA IDENTIFIER .)


state 32

    (20) expression -> expression PLUS expression .
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    CONSTANTS       reduce using rule 20 (expression -> expression PLUS expression .)
    VARIABLE        reduce using rule 20 (expression -> expression PLUS expression .)
    IDENTIFIER      reduce using rule 20 (expression -> expression PLUS expression .)
    $end            reduce using rule 20 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30

  ! PLUS            [ reduce using rule 20 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 20 (expression -> expression PLUS expression .) ]


state 33

    (21) expression -> expression MINUS expression .
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    CONSTANTS       reduce using rule 21 (expression -> expression MINUS expression .)
    VARIABLE        reduce using rule 21 (expression -> expression MINUS expression .)
    IDENTIFIER      reduce using rule 21 (expression -> expression MINUS expression .)
    $end            reduce using rule 21 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30

  ! PLUS            [ reduce using rule 21 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 21 (expression -> expression MINUS expression .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 32 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 32 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 33 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 33 resolved as shift
