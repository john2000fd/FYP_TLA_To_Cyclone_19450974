Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    AT
    BACK_SLASH
    CHECK
    COLON
    DOT
    EXCLAMATION_MARK
    FORWARD_SLASH
    GREATER_OR_EQ
    GREATER_THAN
    LEFT_BRACE
    LEFT_SQR_BRACKET
    LESS_OR_EQ
    LESS_THAN
    MODULE_NAME
    MODULUS
    NEXT
    NOT_EQUALS
    OR
    RIGHT_BRACE
    RIGHT_SQR_BRACKET
    SEMICOLON
    SINGLE_QUOTE
    SPEC
    UNCHANGED
    UNDERSCORE
    VARIABLE_NAME

Grammar

Rule 0     S' -> module
Rule 1     module -> MODULE_WRAPPER MODULE IDENTIFIER MODULE_WRAPPER extends declarations
Rule 2     module -> MODULE_WRAPPER MODULE IDENTIFIER MODULE_WRAPPER declarations
Rule 3     extends -> EXTENDS identifier_list
Rule 4     identifier_list -> identifier_list COMMA IDENTIFIER
Rule 5     identifier_list -> IDENTIFIER
Rule 6     declarations -> declarations declaration
Rule 7     declarations -> declaration
Rule 8     declaration -> constants_declaration
Rule 9     declaration -> variables_declaration
Rule 10    declaration -> assignment_statement
Rule 11    constants_declaration -> CONSTANTS identifier_list
Rule 12    variables_declaration -> VARIABLE identifier_list
Rule 13    graph_declaration -> GRAPH IDENTIFIER graph_body
Rule 14    graph_body -> graph_body graph_statement
Rule 15    graph_body -> graph_statement
Rule 16    graph_statement -> node_declaration
Rule 17    graph_statement -> edge_declaration
Rule 18    node_declaration -> NODE IDENTIFIER
Rule 19    edge_declaration -> EDGE IDENTIFIER ARROW IDENTIFIER
Rule 20    invariant_declaration -> INVARIANT expression
Rule 21    property_goal_declaration -> GOAL expression
Rule 22    assignment_statement -> IDENTIFIER EQUALS_ASSIGNMENT expression
Rule 23    expression -> expression PLUS expression
Rule 24    expression -> expression MINUS expression
Rule 25    expression -> expression STAR expression
Rule 26    expression -> expression DIVIDE expression
Rule 27    expression -> IDENTIFIER
Rule 28    expression -> NUMBER_LITERAL
Rule 29    expression -> STRING_LITERAL
Rule 30    expression -> LEFT_PAREN expression RIGHT_PAREN
Rule 31    init_declaration -> INIT EQUALS_DEFINITIONS expression
Rule 32    empty -> <empty>

Terminals, with rules where they appear

AND                  : 
ARROW                : 19
AT                   : 
BACK_SLASH           : 
CHECK                : 
COLON                : 
COMMA                : 4
CONSTANTS            : 11
DIVIDE               : 26
DOT                  : 
EDGE                 : 19
EQUALS_ASSIGNMENT    : 22
EQUALS_DEFINITIONS   : 31
EXCLAMATION_MARK     : 
EXTENDS              : 3
FORWARD_SLASH        : 
GOAL                 : 21
GRAPH                : 13
GREATER_OR_EQ        : 
GREATER_THAN         : 
IDENTIFIER           : 1 2 4 5 13 18 19 19 22 27
INIT                 : 31
INVARIANT            : 20
LEFT_BRACE           : 
LEFT_PAREN           : 30
LEFT_SQR_BRACKET     : 
LESS_OR_EQ           : 
LESS_THAN            : 
MINUS                : 24
MODULE               : 1 2
MODULE_NAME          : 
MODULE_WRAPPER       : 1 1 2 2
MODULUS              : 
NEXT                 : 
NODE                 : 18
NOT_EQUALS           : 
NUMBER_LITERAL       : 28
OR                   : 
PLUS                 : 23
RIGHT_BRACE          : 
RIGHT_PAREN          : 30
RIGHT_SQR_BRACKET    : 
SEMICOLON            : 
SINGLE_QUOTE         : 
SPEC                 : 
STAR                 : 25
STRING_LITERAL       : 29
UNCHANGED            : 
UNDERSCORE           : 
VARIABLE             : 12
VARIABLE_NAME        : 
error                : 

Nonterminals, with rules where they appear

assignment_statement : 10
constants_declaration : 8
declaration          : 6 7
declarations         : 1 2 6
edge_declaration     : 17
empty                : 
expression           : 20 21 22 23 23 24 24 25 25 26 26 30 31
extends              : 1
graph_body           : 13 14
graph_declaration    : 
graph_statement      : 14 15
identifier_list      : 3 4 11 12
init_declaration     : 
invariant_declaration : 
module               : 0
node_declaration     : 16
property_goal_declaration : 
variables_declaration : 9

Parsing method: LALR

state 0

    (0) S' -> . module
    (1) module -> . MODULE_WRAPPER MODULE IDENTIFIER MODULE_WRAPPER extends declarations
    (2) module -> . MODULE_WRAPPER MODULE IDENTIFIER MODULE_WRAPPER declarations

    MODULE_WRAPPER  shift and go to state 2

    module                         shift and go to state 1

state 1

    (0) S' -> module .



state 2

    (1) module -> MODULE_WRAPPER . MODULE IDENTIFIER MODULE_WRAPPER extends declarations
    (2) module -> MODULE_WRAPPER . MODULE IDENTIFIER MODULE_WRAPPER declarations

    MODULE          shift and go to state 3


state 3

    (1) module -> MODULE_WRAPPER MODULE . IDENTIFIER MODULE_WRAPPER extends declarations
    (2) module -> MODULE_WRAPPER MODULE . IDENTIFIER MODULE_WRAPPER declarations

    IDENTIFIER      shift and go to state 4


state 4

    (1) module -> MODULE_WRAPPER MODULE IDENTIFIER . MODULE_WRAPPER extends declarations
    (2) module -> MODULE_WRAPPER MODULE IDENTIFIER . MODULE_WRAPPER declarations

    MODULE_WRAPPER  shift and go to state 5


state 5

    (1) module -> MODULE_WRAPPER MODULE IDENTIFIER MODULE_WRAPPER . extends declarations
    (2) module -> MODULE_WRAPPER MODULE IDENTIFIER MODULE_WRAPPER . declarations
    (3) extends -> . EXTENDS identifier_list
    (6) declarations -> . declarations declaration
    (7) declarations -> . declaration
    (8) declaration -> . constants_declaration
    (9) declaration -> . variables_declaration
    (10) declaration -> . assignment_statement
    (11) constants_declaration -> . CONSTANTS identifier_list
    (12) variables_declaration -> . VARIABLE identifier_list
    (22) assignment_statement -> . IDENTIFIER EQUALS_ASSIGNMENT expression

    EXTENDS         shift and go to state 9
    CONSTANTS       shift and go to state 14
    VARIABLE        shift and go to state 15
    IDENTIFIER      shift and go to state 6

    extends                        shift and go to state 7
    declarations                   shift and go to state 8
    declaration                    shift and go to state 10
    constants_declaration          shift and go to state 11
    variables_declaration          shift and go to state 12
    assignment_statement           shift and go to state 13

state 6

    (22) assignment_statement -> IDENTIFIER . EQUALS_ASSIGNMENT expression

    EQUALS_ASSIGNMENT shift and go to state 16


state 7

    (1) module -> MODULE_WRAPPER MODULE IDENTIFIER MODULE_WRAPPER extends . declarations
    (6) declarations -> . declarations declaration
    (7) declarations -> . declaration
    (8) declaration -> . constants_declaration
    (9) declaration -> . variables_declaration
    (10) declaration -> . assignment_statement
    (11) constants_declaration -> . CONSTANTS identifier_list
    (12) variables_declaration -> . VARIABLE identifier_list
    (22) assignment_statement -> . IDENTIFIER EQUALS_ASSIGNMENT expression

    CONSTANTS       shift and go to state 14
    VARIABLE        shift and go to state 15
    IDENTIFIER      shift and go to state 6

    declarations                   shift and go to state 17
    declaration                    shift and go to state 10
    constants_declaration          shift and go to state 11
    variables_declaration          shift and go to state 12
    assignment_statement           shift and go to state 13

state 8

    (2) module -> MODULE_WRAPPER MODULE IDENTIFIER MODULE_WRAPPER declarations .
    (6) declarations -> declarations . declaration
    (8) declaration -> . constants_declaration
    (9) declaration -> . variables_declaration
    (10) declaration -> . assignment_statement
    (11) constants_declaration -> . CONSTANTS identifier_list
    (12) variables_declaration -> . VARIABLE identifier_list
    (22) assignment_statement -> . IDENTIFIER EQUALS_ASSIGNMENT expression

    $end            reduce using rule 2 (module -> MODULE_WRAPPER MODULE IDENTIFIER MODULE_WRAPPER declarations .)
    CONSTANTS       shift and go to state 14
    VARIABLE        shift and go to state 15
    IDENTIFIER      shift and go to state 6

    declaration                    shift and go to state 18
    constants_declaration          shift and go to state 11
    variables_declaration          shift and go to state 12
    assignment_statement           shift and go to state 13

state 9

    (3) extends -> EXTENDS . identifier_list
    (4) identifier_list -> . identifier_list COMMA IDENTIFIER
    (5) identifier_list -> . IDENTIFIER

    IDENTIFIER      shift and go to state 20

    identifier_list                shift and go to state 19

state 10

    (7) declarations -> declaration .

    CONSTANTS       reduce using rule 7 (declarations -> declaration .)
    VARIABLE        reduce using rule 7 (declarations -> declaration .)
    IDENTIFIER      reduce using rule 7 (declarations -> declaration .)
    $end            reduce using rule 7 (declarations -> declaration .)


state 11

    (8) declaration -> constants_declaration .

    CONSTANTS       reduce using rule 8 (declaration -> constants_declaration .)
    VARIABLE        reduce using rule 8 (declaration -> constants_declaration .)
    IDENTIFIER      reduce using rule 8 (declaration -> constants_declaration .)
    $end            reduce using rule 8 (declaration -> constants_declaration .)


state 12

    (9) declaration -> variables_declaration .

    CONSTANTS       reduce using rule 9 (declaration -> variables_declaration .)
    VARIABLE        reduce using rule 9 (declaration -> variables_declaration .)
    IDENTIFIER      reduce using rule 9 (declaration -> variables_declaration .)
    $end            reduce using rule 9 (declaration -> variables_declaration .)


state 13

    (10) declaration -> assignment_statement .

    CONSTANTS       reduce using rule 10 (declaration -> assignment_statement .)
    VARIABLE        reduce using rule 10 (declaration -> assignment_statement .)
    IDENTIFIER      reduce using rule 10 (declaration -> assignment_statement .)
    $end            reduce using rule 10 (declaration -> assignment_statement .)


state 14

    (11) constants_declaration -> CONSTANTS . identifier_list
    (4) identifier_list -> . identifier_list COMMA IDENTIFIER
    (5) identifier_list -> . IDENTIFIER

    IDENTIFIER      shift and go to state 20

    identifier_list                shift and go to state 21

state 15

    (12) variables_declaration -> VARIABLE . identifier_list
    (4) identifier_list -> . identifier_list COMMA IDENTIFIER
    (5) identifier_list -> . IDENTIFIER

    IDENTIFIER      shift and go to state 20

    identifier_list                shift and go to state 22

state 16

    (22) assignment_statement -> IDENTIFIER EQUALS_ASSIGNMENT . expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression STAR expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . IDENTIFIER
    (28) expression -> . NUMBER_LITERAL
    (29) expression -> . STRING_LITERAL
    (30) expression -> . LEFT_PAREN expression RIGHT_PAREN

    IDENTIFIER      shift and go to state 23
    NUMBER_LITERAL  shift and go to state 25
    STRING_LITERAL  shift and go to state 26
    LEFT_PAREN      shift and go to state 27

    expression                     shift and go to state 24

state 17

    (1) module -> MODULE_WRAPPER MODULE IDENTIFIER MODULE_WRAPPER extends declarations .
    (6) declarations -> declarations . declaration
    (8) declaration -> . constants_declaration
    (9) declaration -> . variables_declaration
    (10) declaration -> . assignment_statement
    (11) constants_declaration -> . CONSTANTS identifier_list
    (12) variables_declaration -> . VARIABLE identifier_list
    (22) assignment_statement -> . IDENTIFIER EQUALS_ASSIGNMENT expression

    $end            reduce using rule 1 (module -> MODULE_WRAPPER MODULE IDENTIFIER MODULE_WRAPPER extends declarations .)
    CONSTANTS       shift and go to state 14
    VARIABLE        shift and go to state 15
    IDENTIFIER      shift and go to state 6

    declaration                    shift and go to state 18
    constants_declaration          shift and go to state 11
    variables_declaration          shift and go to state 12
    assignment_statement           shift and go to state 13

state 18

    (6) declarations -> declarations declaration .

    CONSTANTS       reduce using rule 6 (declarations -> declarations declaration .)
    VARIABLE        reduce using rule 6 (declarations -> declarations declaration .)
    IDENTIFIER      reduce using rule 6 (declarations -> declarations declaration .)
    $end            reduce using rule 6 (declarations -> declarations declaration .)


state 19

    (3) extends -> EXTENDS identifier_list .
    (4) identifier_list -> identifier_list . COMMA IDENTIFIER

    CONSTANTS       reduce using rule 3 (extends -> EXTENDS identifier_list .)
    VARIABLE        reduce using rule 3 (extends -> EXTENDS identifier_list .)
    IDENTIFIER      reduce using rule 3 (extends -> EXTENDS identifier_list .)
    COMMA           shift and go to state 28


state 20

    (5) identifier_list -> IDENTIFIER .

    COMMA           reduce using rule 5 (identifier_list -> IDENTIFIER .)
    CONSTANTS       reduce using rule 5 (identifier_list -> IDENTIFIER .)
    VARIABLE        reduce using rule 5 (identifier_list -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 5 (identifier_list -> IDENTIFIER .)
    $end            reduce using rule 5 (identifier_list -> IDENTIFIER .)


state 21

    (11) constants_declaration -> CONSTANTS identifier_list .
    (4) identifier_list -> identifier_list . COMMA IDENTIFIER

    CONSTANTS       reduce using rule 11 (constants_declaration -> CONSTANTS identifier_list .)
    VARIABLE        reduce using rule 11 (constants_declaration -> CONSTANTS identifier_list .)
    IDENTIFIER      reduce using rule 11 (constants_declaration -> CONSTANTS identifier_list .)
    $end            reduce using rule 11 (constants_declaration -> CONSTANTS identifier_list .)
    COMMA           shift and go to state 28


state 22

    (12) variables_declaration -> VARIABLE identifier_list .
    (4) identifier_list -> identifier_list . COMMA IDENTIFIER

    CONSTANTS       reduce using rule 12 (variables_declaration -> VARIABLE identifier_list .)
    VARIABLE        reduce using rule 12 (variables_declaration -> VARIABLE identifier_list .)
    IDENTIFIER      reduce using rule 12 (variables_declaration -> VARIABLE identifier_list .)
    $end            reduce using rule 12 (variables_declaration -> VARIABLE identifier_list .)
    COMMA           shift and go to state 28


state 23

    (27) expression -> IDENTIFIER .

    PLUS            reduce using rule 27 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 27 (expression -> IDENTIFIER .)
    STAR            reduce using rule 27 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 27 (expression -> IDENTIFIER .)
    CONSTANTS       reduce using rule 27 (expression -> IDENTIFIER .)
    VARIABLE        reduce using rule 27 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 27 (expression -> IDENTIFIER .)
    $end            reduce using rule 27 (expression -> IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 27 (expression -> IDENTIFIER .)


state 24

    (22) assignment_statement -> IDENTIFIER EQUALS_ASSIGNMENT expression .
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . STAR expression
    (26) expression -> expression . DIVIDE expression

    CONSTANTS       reduce using rule 22 (assignment_statement -> IDENTIFIER EQUALS_ASSIGNMENT expression .)
    VARIABLE        reduce using rule 22 (assignment_statement -> IDENTIFIER EQUALS_ASSIGNMENT expression .)
    IDENTIFIER      reduce using rule 22 (assignment_statement -> IDENTIFIER EQUALS_ASSIGNMENT expression .)
    $end            reduce using rule 22 (assignment_statement -> IDENTIFIER EQUALS_ASSIGNMENT expression .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    STAR            shift and go to state 31
    DIVIDE          shift and go to state 32


state 25

    (28) expression -> NUMBER_LITERAL .

    PLUS            reduce using rule 28 (expression -> NUMBER_LITERAL .)
    MINUS           reduce using rule 28 (expression -> NUMBER_LITERAL .)
    STAR            reduce using rule 28 (expression -> NUMBER_LITERAL .)
    DIVIDE          reduce using rule 28 (expression -> NUMBER_LITERAL .)
    CONSTANTS       reduce using rule 28 (expression -> NUMBER_LITERAL .)
    VARIABLE        reduce using rule 28 (expression -> NUMBER_LITERAL .)
    IDENTIFIER      reduce using rule 28 (expression -> NUMBER_LITERAL .)
    $end            reduce using rule 28 (expression -> NUMBER_LITERAL .)
    RIGHT_PAREN     reduce using rule 28 (expression -> NUMBER_LITERAL .)


state 26

    (29) expression -> STRING_LITERAL .

    PLUS            reduce using rule 29 (expression -> STRING_LITERAL .)
    MINUS           reduce using rule 29 (expression -> STRING_LITERAL .)
    STAR            reduce using rule 29 (expression -> STRING_LITERAL .)
    DIVIDE          reduce using rule 29 (expression -> STRING_LITERAL .)
    CONSTANTS       reduce using rule 29 (expression -> STRING_LITERAL .)
    VARIABLE        reduce using rule 29 (expression -> STRING_LITERAL .)
    IDENTIFIER      reduce using rule 29 (expression -> STRING_LITERAL .)
    $end            reduce using rule 29 (expression -> STRING_LITERAL .)
    RIGHT_PAREN     reduce using rule 29 (expression -> STRING_LITERAL .)


state 27

    (30) expression -> LEFT_PAREN . expression RIGHT_PAREN
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression STAR expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . IDENTIFIER
    (28) expression -> . NUMBER_LITERAL
    (29) expression -> . STRING_LITERAL
    (30) expression -> . LEFT_PAREN expression RIGHT_PAREN

    IDENTIFIER      shift and go to state 23
    NUMBER_LITERAL  shift and go to state 25
    STRING_LITERAL  shift and go to state 26
    LEFT_PAREN      shift and go to state 27

    expression                     shift and go to state 33

state 28

    (4) identifier_list -> identifier_list COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 34


state 29

    (23) expression -> expression PLUS . expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression STAR expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . IDENTIFIER
    (28) expression -> . NUMBER_LITERAL
    (29) expression -> . STRING_LITERAL
    (30) expression -> . LEFT_PAREN expression RIGHT_PAREN

    IDENTIFIER      shift and go to state 23
    NUMBER_LITERAL  shift and go to state 25
    STRING_LITERAL  shift and go to state 26
    LEFT_PAREN      shift and go to state 27

    expression                     shift and go to state 35

state 30

    (24) expression -> expression MINUS . expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression STAR expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . IDENTIFIER
    (28) expression -> . NUMBER_LITERAL
    (29) expression -> . STRING_LITERAL
    (30) expression -> . LEFT_PAREN expression RIGHT_PAREN

    IDENTIFIER      shift and go to state 23
    NUMBER_LITERAL  shift and go to state 25
    STRING_LITERAL  shift and go to state 26
    LEFT_PAREN      shift and go to state 27

    expression                     shift and go to state 36

state 31

    (25) expression -> expression STAR . expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression STAR expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . IDENTIFIER
    (28) expression -> . NUMBER_LITERAL
    (29) expression -> . STRING_LITERAL
    (30) expression -> . LEFT_PAREN expression RIGHT_PAREN

    IDENTIFIER      shift and go to state 23
    NUMBER_LITERAL  shift and go to state 25
    STRING_LITERAL  shift and go to state 26
    LEFT_PAREN      shift and go to state 27

    expression                     shift and go to state 37

state 32

    (26) expression -> expression DIVIDE . expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression STAR expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . IDENTIFIER
    (28) expression -> . NUMBER_LITERAL
    (29) expression -> . STRING_LITERAL
    (30) expression -> . LEFT_PAREN expression RIGHT_PAREN

    IDENTIFIER      shift and go to state 23
    NUMBER_LITERAL  shift and go to state 25
    STRING_LITERAL  shift and go to state 26
    LEFT_PAREN      shift and go to state 27

    expression                     shift and go to state 38

state 33

    (30) expression -> LEFT_PAREN expression . RIGHT_PAREN
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . STAR expression
    (26) expression -> expression . DIVIDE expression

    RIGHT_PAREN     shift and go to state 39
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    STAR            shift and go to state 31
    DIVIDE          shift and go to state 32


state 34

    (4) identifier_list -> identifier_list COMMA IDENTIFIER .

    COMMA           reduce using rule 4 (identifier_list -> identifier_list COMMA IDENTIFIER .)
    CONSTANTS       reduce using rule 4 (identifier_list -> identifier_list COMMA IDENTIFIER .)
    VARIABLE        reduce using rule 4 (identifier_list -> identifier_list COMMA IDENTIFIER .)
    IDENTIFIER      reduce using rule 4 (identifier_list -> identifier_list COMMA IDENTIFIER .)
    $end            reduce using rule 4 (identifier_list -> identifier_list COMMA IDENTIFIER .)


state 35

    (23) expression -> expression PLUS expression .
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . STAR expression
    (26) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 23 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 23 (expression -> expression PLUS expression .)
    CONSTANTS       reduce using rule 23 (expression -> expression PLUS expression .)
    VARIABLE        reduce using rule 23 (expression -> expression PLUS expression .)
    IDENTIFIER      reduce using rule 23 (expression -> expression PLUS expression .)
    $end            reduce using rule 23 (expression -> expression PLUS expression .)
    RIGHT_PAREN     reduce using rule 23 (expression -> expression PLUS expression .)
    STAR            shift and go to state 31
    DIVIDE          shift and go to state 32

  ! STAR            [ reduce using rule 23 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 23 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 29 ]
  ! MINUS           [ shift and go to state 30 ]


state 36

    (24) expression -> expression MINUS expression .
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . STAR expression
    (26) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 24 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 24 (expression -> expression MINUS expression .)
    CONSTANTS       reduce using rule 24 (expression -> expression MINUS expression .)
    VARIABLE        reduce using rule 24 (expression -> expression MINUS expression .)
    IDENTIFIER      reduce using rule 24 (expression -> expression MINUS expression .)
    $end            reduce using rule 24 (expression -> expression MINUS expression .)
    RIGHT_PAREN     reduce using rule 24 (expression -> expression MINUS expression .)
    STAR            shift and go to state 31
    DIVIDE          shift and go to state 32

  ! STAR            [ reduce using rule 24 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 24 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 29 ]
  ! MINUS           [ shift and go to state 30 ]


state 37

    (25) expression -> expression STAR expression .
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . STAR expression
    (26) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 25 (expression -> expression STAR expression .)
    MINUS           reduce using rule 25 (expression -> expression STAR expression .)
    STAR            reduce using rule 25 (expression -> expression STAR expression .)
    DIVIDE          reduce using rule 25 (expression -> expression STAR expression .)
    CONSTANTS       reduce using rule 25 (expression -> expression STAR expression .)
    VARIABLE        reduce using rule 25 (expression -> expression STAR expression .)
    IDENTIFIER      reduce using rule 25 (expression -> expression STAR expression .)
    $end            reduce using rule 25 (expression -> expression STAR expression .)
    RIGHT_PAREN     reduce using rule 25 (expression -> expression STAR expression .)

  ! PLUS            [ shift and go to state 29 ]
  ! MINUS           [ shift and go to state 30 ]
  ! STAR            [ shift and go to state 31 ]
  ! DIVIDE          [ shift and go to state 32 ]


state 38

    (26) expression -> expression DIVIDE expression .
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . STAR expression
    (26) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 26 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 26 (expression -> expression DIVIDE expression .)
    STAR            reduce using rule 26 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 26 (expression -> expression DIVIDE expression .)
    CONSTANTS       reduce using rule 26 (expression -> expression DIVIDE expression .)
    VARIABLE        reduce using rule 26 (expression -> expression DIVIDE expression .)
    IDENTIFIER      reduce using rule 26 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 26 (expression -> expression DIVIDE expression .)
    RIGHT_PAREN     reduce using rule 26 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 29 ]
  ! MINUS           [ shift and go to state 30 ]
  ! STAR            [ shift and go to state 31 ]
  ! DIVIDE          [ shift and go to state 32 ]


state 39

    (30) expression -> LEFT_PAREN expression RIGHT_PAREN .

    PLUS            reduce using rule 30 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    MINUS           reduce using rule 30 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    STAR            reduce using rule 30 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    DIVIDE          reduce using rule 30 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    CONSTANTS       reduce using rule 30 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    VARIABLE        reduce using rule 30 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    IDENTIFIER      reduce using rule 30 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    $end            reduce using rule 30 (expression -> LEFT_PAREN expression RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 30 (expression -> LEFT_PAREN expression RIGHT_PAREN .)

